#include <iostream>
#include <vector>
using namespace std;

struct Member {
    int id;
    int score;
};


void merge(vector<Member>& arr, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;
    vector<Member> L(n1), R(n2);
    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i].score > R[j].score) {
            arr[k] = L[i];
            i++;
        }
        else if (L[i].score < R[j].score) {
            arr[k] = R[j];
            j++;
        }
        else {
            if (L[i].id < R[j].id) {
                arr[k] = L[i];
                i++;
            }
            else {
                arr[k] = R[j];
                j++;
            }
        }
        k++;
    }
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}


void mergeSort(vector<Member>& arr, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

int main() {
    int n;
    cin >> n;
    vector<Member> participants(n);
    for (int i = 0; i < n; i++) {
        participants[i].id = i + 1;
        cin >> participants[i].score;
    }
    mergeSort(participants, 0, n - 1);
    for (int i = 0; i < n; i++) {
        cout << participants[i].id << " ";
    }
}
